package com.baiyi.opscloud.jumpserver.api;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.baiyi.opscloud.jumpserver.base.ApiConstants;import com.baiyi.opscloud.jumpserver.base.ApiType;import com.baiyi.opscloud.jumpserver.base.JmsException;import com.baiyi.opscloud.jumpserver.http.JmsRequest;import com.google.common.collect.Maps;import org.apache.commons.lang3.StringUtils;import java.util.Map;public class BaseApi {    protected String URL;    private String USERNAME;    private String PASSWORD;    protected String TOKEN;    public BaseApi(String url, String username, String password) {        this.URL = url;        this.USERNAME = username;        this.PASSWORD = password;        getToken();    }    public BaseApi(String url, String token) {        this.URL = url;        this.TOKEN = "token " + token;    }    public BaseApi() {    }    public AssetsApi jmsAssetsService() {        return new AssetsApi(this.URL, this.TOKEN);    }    public LunaApi jmsLunaService() {        return new LunaApi(this.URL, this.TOKEN);    }    public PermissionApi jmsPermissionService() {        return new PermissionApi(this.URL, this.TOKEN);    }    public UserApi jmsUsersService() {        return new UserApi(this.URL, this.TOKEN);    }    public String getToken() {        if (StringUtils.isNotBlank(this.TOKEN)) {            return this.TOKEN;        }        JSONObject jsonObject = new JSONObject();        jsonObject.put("username", USERNAME);        jsonObject.put("password", PASSWORD);        try {            Map<String, String> map = JmsRequest.getRequest(URL + ApiConstants.TOKEN, jsonObject.toString(), ApiType.API_POST, null);            String token = "Bearer " + JSON.parseObject(map.get("resultStr")).getString("token");            this.TOKEN = token;            return token;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    public Map<String, String> add(Object object, String apiUrl) {        try {            String jsonStr = JSON.toJSONString(object);            Map<String, String> map = JmsRequest.getRequest(this.URL + apiUrl, jsonStr, ApiType.API_POST, this.TOKEN);            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> updatePut(Object object, String apiUrl) {        try {            String jsonStr = JSON.toJSONString(object);            Map<String, String> map = JmsRequest.getRequest(this.URL + apiUrl, jsonStr, ApiType.API_PUT, this.TOKEN);            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> updateX(Object object, String apiUrl, String id) {        try {            String jsonStr = JSON.toJSONString(object);            JSONObject jsonObject = JSON.parseObject(jsonStr);            jsonObject.remove("id");            jsonStr = jsonObject.toString();            apiUrl = apiUrl.replaceAll("\\{" + "id" + "\\}", id);            Map<String, String> map = JmsRequest.getRequest(this.URL + apiUrl, jsonStr, ApiType.API_PATCH, this.TOKEN);            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> updatePubkey(Object object, String apiUrl, String id) {        try {            String jsonStr = JSON.toJSONString(object);            JSONObject jsonObject = JSON.parseObject(jsonStr);            //jsonObject.remove("id");            jsonStr = jsonObject.toString();            jsonStr = jsonStr.replaceAll("publicKey", "_public_key");            apiUrl = apiUrl.replaceAll("\\{" + "id" + "\\}", id);            Map<String, String> map = JmsRequest.getRequest(this.URL + apiUrl, jsonStr, ApiType.API_PUT, this.TOKEN);            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> update(Object object, String apiUrl, String id) {        try {            if (StringUtils.isBlank(id)) {                throw new JmsException("请填写ID信息");            }            String jsonStr = JSON.toJSONString(object);            Map<String, String> map = JmsRequest.getRequest(this.URL + apiUrl + id + "/", jsonStr, ApiType.API_PATCH, this.TOKEN);            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> delete(Object object, String apiUrl, String id) {        try {            if (StringUtils.isBlank(id)) {                throw new JmsException("请填写ID信息");            }            String jsonStr = JSON.toJSONString(object);            Map<String, String> map = JmsRequest.getRequest(this.URL + apiUrl + id + "/", jsonStr, ApiType.API_DELETE, this.TOKEN);            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> query(String id, String apiUrl) {        try {            Map<String, String> map = Maps.newHashMap();            if (StringUtils.isNotBlank(id)) {                map = JmsRequest.getRequest(this.URL + apiUrl + id + "/", null, ApiType.API_GET, this.TOKEN);            } else {                map = JmsRequest.getRequest(this.URL + apiUrl, null, ApiType.API_GET, this.TOKEN);            }            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }}